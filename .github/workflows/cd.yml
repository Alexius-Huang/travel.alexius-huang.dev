name: CD Workflow
on:
  push:
    branches: [main]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU for cross-architecture builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_ACCESS_REGION }}

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: latest
          PLATFORM: linux/arm64
        run: |
          docker buildx build \
            --platform $PLATFORM \
            --push \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Deploy to Amazon ECS
        env:
          AWS_ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
          AWS_ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
          TARGET_GROUP_ARN: ${{ secrets.AWS_ECS_LOAD_BALANCER_TARGET_GROUP_ARN }}
          CONTAINER_NAME: travel-website
          CONTAINER_PORT: 3000
        run: |
          aws ecs update-service \
            --cluster $AWS_ECS_CLUSTER \
            --service $AWS_ECS_SERVICE \
            --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT" \
            --force-new-deployment
